<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploit on Fan@CU</title>
    <link>http://fanzy.me/tags/exploit/</link>
    <description>Recent content in Exploit on Fan@CU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://fanzy.me/tags/exploit/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why heart bleeds</title>
      <link>http://fanzy.me/post/CVE-2014-0160/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/CVE-2014-0160/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s not rare that the critical security infrastructure on which we heavily reply sometimes is broken, in one way or another. This blog investigated the &lt;code&gt;Heartbeat&lt;/code&gt; mechanism in TLS protocol and how it leads to the widely spread &lt;strong&gt;HeartBleed&lt;/strong&gt; vulnerability, aka CVE-2014-0160 in &lt;code&gt;OpenSSL 1.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;description-from-nvd:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Description from NVD&lt;/h2&gt;

&lt;p&gt;The (1) &lt;code&gt;TLS&lt;/code&gt; and (2) &lt;code&gt;DTLS&lt;/code&gt; implementations in &lt;code&gt;OpenSSL 1.0.1&lt;/code&gt; before &lt;code&gt;1.0.1g&lt;/code&gt; do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, as demonstrated by reading private keys, related to &lt;code&gt;d1_both.c&lt;/code&gt; and &lt;code&gt;t1_lib.c&lt;/code&gt;, aka the Heartbleed bug.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&#34;https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0160&#34;&gt;NVD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;heartbeat-extension:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Heartbeat Extension&lt;/h2&gt;

&lt;p&gt;First let&amp;rsquo;s have a look at the Heartbeat Extension. The &lt;strong&gt;Heartbeat Extension&lt;/strong&gt; is a pretty new extension to the Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) protocols. Essentially the Heartbeat Extension is designed to provide a faster and light-weight keeping-alive mechanism, and DTLS protocol can use it to perform path MTU (PMTU) discovery as well.&lt;/p&gt;

&lt;p&gt;Generally speaking, the Heartbeat Extension works in a quite simple way. Clients peroidcally send &lt;code&gt;HeartbeatRequest&lt;/code&gt; messages (including a random chosen payload) to server and the server respond with the exact copy of that payload. If the server&amp;rsquo;s response matches with the original message, the clients can make sure that that *the server is not only alive but responsive. Of course all the messages exchanged during this routine is on top of TLS layer. (Precisely speaking, the Heartbeat protocol is a new protocol running on top of the Record Layer.)For details please refer to &lt;a href=&#34;https://tools.ietf.org/html/rfc6520&#34;&gt;RFC6520&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;messages:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Messages&lt;/h2&gt;

&lt;p&gt;A natural question we&amp;rsquo;re gonna ask is how can this simple mechanism go wrong? To answer this question, we need to know some nitty-gritty. First, data structure. According to RFC6520, a HeartBeat message consists of &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, attached &lt;code&gt;payload&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct {
    HeartbeatMessageType type;
    uint16 payload_length;
    opaque payload[HeartbeatMessage.payload_length];
    opaque padding[padding_length];
} HeartbeatMessage;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though the description in RFC is fairly clear and concise, I&amp;rsquo;d like to summarize several important and tangent facts for better understanding of CVE-2014-0160,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The length of the &lt;code&gt;type&lt;/code&gt; field is 1 byte, and the length of the &lt;code&gt;payload_length&lt;/code&gt; is 2.&lt;/li&gt;
&lt;li&gt;A HeartbeatMessage must be shorter than &lt;code&gt;TLSPlaintext.length&lt;/code&gt;(TLS) or &lt;code&gt;DTLSPlaintext.length&lt;/code&gt;(DTLS). (decided through peer negotiation, default is 2^14 Bytes&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;padding_length&lt;/code&gt; must be at least 16.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scene-of-the-accident:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Scene of the accident&lt;/h2&gt;

&lt;p&gt;So here is the vulnerable code in OpenSSL 1.0.1. Let&amp;rsquo;s check step by step to see what would happen when server receives the following message:&lt;code&gt;&amp;quot;\x18\x03\x02\x00\x03\x01\x40\x00&amp;quot;&lt;/code&gt;. A few legends,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;18&lt;/code&gt;   : Content type::Heartbeat&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0302&lt;/code&gt; : Major Version=3, Minor Version=2, indicates TLS 1.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0003&lt;/code&gt; : Length = 3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;01&lt;/code&gt;   : TLS1_HB_REQUEST&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4000&lt;/code&gt; : 0x4000=2^14=16384, indicates 64-byte payload&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apparently, this packet is totally invalid, in that it claimed a non-existent 64 bytes payload. This is not hard to check at all, simply looking at the &lt;code&gt;length&lt;/code&gt; of the whole packet and the &lt;code&gt;padding_length&lt;/code&gt; is enough, because other parts is of fixed-length. However, OpenSSL didn&amp;rsquo;t do this simple check. In other words, the above packet, though apparently invalid, will be treated as normal in the following function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int
tls1_process_heartbeat(SSL *s)
{
  unsigned char *p = &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], *pl;   // (1) p points to packet
  unsigned short hbtype;
  unsigned int payload;
  unsigned int padding = 16; /* Use minimum padding */

  /* Read type and payload length first */
  hbtype = *p++;        // (2) p gets advanced to point to `payload_length`
  n2s(p, payload);      // (3) payload = n2s(*p), p+=2
  pl = p;               // (4) p and pl points to payload

  if (s-&amp;gt;msg_callback)
    s-&amp;gt;msg_callback(0, s-&amp;gt;version, TLS1_RT_HEARTBEAT,
      &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], s-&amp;gt;s3-&amp;gt;rrec.length,
      s, s-&amp;gt;msg_callback_arg);

  if (hbtype == TLS1_HB_REQUEST)
    {
    unsigned char *buffer, *bp;
    int r;

    buffer = OPENSSL_malloc(1 + 2 + payload + padding);
    bp = buffer;      // (1) bp points to buffer

    /* Enter response type, length and copy payload */
    *bp++ = TLS1_HB_RESPONSE;    // (2) 1st byte: TYPE
    s2n(payload, bp);            // (3) 2-3 byte: payload_length
    memcpy(bp, pl, payload);     // (*) payload Bytes of secret copied **
    bp += payload;
    /* Random padding */
    RAND_pseudo_bytes(bp, padding);

    //... all secrets get sent to client ...
}

//fetched from ssl/ssl_locl.h
//  n2s(c, s)
//  s = c[0] || c[1] (|| stands for concatanation)
//  c = c + 2
# define n2s(c,s)  ((s=(((unsigned int)(c[0]))&amp;lt;&amp;lt; 8)| \
              (((unsigned int)(c[1])))),c+=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we call &lt;code&gt;tls1_process_heartbeat&lt;/code&gt; with the crafted packet &lt;code&gt;&amp;quot;\x18\x03\x02\x00\x03\x01\x40\x00&amp;quot;&lt;/code&gt;. What would happen is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; points to the beginning of HeartBeat message, i.e. the byte &lt;code&gt;&amp;quot;\x01&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hbtype := TLS1_HB_REQUEST&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; points to &lt;code&gt;payload_length&lt;/code&gt;, i.e. &lt;code&gt;&amp;quot;\x40\x00&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;payload := 0x4000&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; nows points to somewhere outside of the packet (note that packet has already ended, there is no payload at all!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memcpy(bp, pl, payload)&lt;/code&gt; actually copied 64 bytes memory from &lt;code&gt;pl&lt;/code&gt;, somewhere in stack, to the response packet that users that see in clear.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;fix-and-conclusion:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Fix and Conclusion&lt;/h2&gt;

&lt;p&gt;As we saw before, it&amp;rsquo;s fairly straightforward to fix this bug &amp;ndash; just check the length! It turned out basically just one line of C code can save the world. How surprising it is! Even though TLS is elegantly designed on board, even though the RFC is well written and carefully proof read, a single line of code can screw up everything. This bug reminds me of a sentence in Practical Cryptography:.&lt;/p&gt;

&lt;p&gt;Official patch is attached for completeness.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/ssl/t1_lib.c b/ssl/t1_lib.c
index b82fada..bddffd9 100644 (file)
--- a/ssl/t1_lib.c
+++ b/ssl/t1_lib.c
@@ -2588,16 +2588,20 @@ tls1_process_heartbeat(SSL *s)
        unsigned int payload;
        unsigned int padding = 16; /* Use minimum padding */

-       /* Read type and payload length first */
-       hbtype = *p++;
-       n2s(p, payload);
-       pl = p;
-
        if (s-&amp;gt;msg_callback)
                s-&amp;gt;msg_callback(0, s-&amp;gt;version, TLS1_RT_HEARTBEAT,
                        &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], s-&amp;gt;s3-&amp;gt;rrec.length,
                        s, s-&amp;gt;msg_callback_arg);

+       /* Read type and payload length first */
+       if (1 + 2 + 16 &amp;gt; s-&amp;gt;s3-&amp;gt;rrec.length)
+               return 0; /* silently discard */
+       hbtype = *p++;
+       n2s(p, payload);
+       if (1 + 2 + payload + 16 &amp;gt; s-&amp;gt;s3-&amp;gt;rrec.length)
+               return 0; /* silently discard per RFC 6520 sec. 4 */
+       pl = p;
+
        if (hbtype == TLS1_HB_REQUEST)
                {
                unsigned char *buffer, *bp;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>