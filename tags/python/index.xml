<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Fan@CU</title>
    <link>http://fanzy.me/tags/python/</link>
    <description>Recent content in Python on Fan@CU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Sep 2015 10:53:13 -0400</lastBuildDate>
    <atom:link href="http://fanzy.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use Amazon Machine Learning in Python</title>
      <link>http://fanzy.me/post/boto-setup/</link>
      <pubDate>Fri, 04 Sep 2015 10:53:13 -0400</pubDate>
      
      <guid>http://fanzy.me/post/boto-setup/</guid>
      <description>

&lt;h2 id=&#34;aws-credentials:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;AWS Credentials&lt;/h2&gt;

&lt;p&gt;Appropriate credentials are required to access aws service API. Amazon Web Service
differentiates two types of credentials: root credentials and IAM credentials.
Root credentials are associated with aws accounts and have full access to all
resources. A maximum of two keys are allowed at a time. On the other end of
spectrum, IAM (Identity and Authentication Management) credentials are analogous
to user accounts in a Unix system, which are created by a root account and their
capabilities can be dynamically managed. AWS advocates the usage of IAM
credentials for security consideration. Of course, one can still create and use
root credentials, however, if they will.&lt;/p&gt;

&lt;p&gt;To access aws API through boto, one needs proper credentials set up. The first
step of doing this is to create a user (if not already created) and download the
access key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To manage IAM credentials, use IAM console.&lt;/li&gt;
&lt;li&gt;To manage root credentials, see &lt;a href=&#34;http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html&#34;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are multiple ways to configure credential file for Boto&amp;rsquo;s usage. For
instance, put the credential file downloaded from IAM at &lt;code&gt;~/.aws/credentials&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
aws_access_key_id = YOUR_ACCESS_KEY
aws_secret_access_key = YOUR_SECRET_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not sure if it&amp;rsquo;s mandatory but Boto document suggest doing so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
region=us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-boto:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;install Boto&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;pip install boto3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If for current user only, append &lt;code&gt;--user&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-boto3:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;Using Boto3&lt;/h2&gt;

&lt;p&gt;To verify your credentials and other configurations are correct, run a minimal
boto3 script this like,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import boto3
s3 = boto3.resource(&#39;s3&#39;)
# Print out bucket names
for bucket in s3.buckets.all():
    print(bucket.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;amazon-machine-learning-api:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;Amazon Machine Learning API&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import boto3

client = boto3.client(&#39;machinelearning&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Automatically generate requirements file for Python project</title>
      <link>http://fanzy.me/post/auto-requirements/</link>
      <pubDate>Thu, 03 Sep 2015 22:15:11 -0400</pubDate>
      
      <guid>http://fanzy.me/post/auto-requirements/</guid>
      <description>&lt;p&gt;When you need to move your Python project around, say, to test under the
production environment, or to run a heavy load script on your powerful cloud
rack, you would better duplicate the exact development environment to avoid
compatibility issues.&lt;/p&gt;

&lt;p&gt;My practice for doing this migration is to use &lt;code&gt;pip&lt;/code&gt; as package management
tool and use &lt;code&gt;requirements.txt&lt;/code&gt; file to document dependencies. Then, to
recover the exact python environment, I just&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --user -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;--user&lt;/code&gt; is used so &lt;code&gt;sudo&lt;/code&gt; is not required.
If &lt;code&gt;virtualenv&lt;/code&gt; is used, probably &lt;code&gt;--user&lt;/code&gt; is not necessary neither.
But mostly I find &lt;code&gt;virtualenv&lt;/code&gt; actually an overkill and just use vanilla
pip instead. I use &lt;code&gt;--user&lt;/code&gt; so as pip will not mess up with default packages
installed by Mac OS (on the othe hand, &lt;code&gt;--system&lt;/code&gt; will).&lt;/p&gt;

&lt;p&gt;Another tool I find useful in automating this process is &lt;code&gt;pipreqs&lt;/code&gt;, which
can analyze &lt;code&gt;import&lt;/code&gt; in your project and extract them into
requirements files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install pipreqs
pipreqs /path/to/project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For completeness, another tangentially relevant choice is &lt;code&gt;pip freeze&lt;/code&gt;,
which lists all installed packages on your machine (you can filter items
by appending &lt;code&gt;--user&lt;/code&gt; and/or other filters to &lt;code&gt;freeze&lt;/code&gt; command), but maybe
not all of them are used in your project.
ear&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Descriptor by Example</title>
      <link>http://fanzy.me/post/python-descriptor-by-live-example/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/python-descriptor-by-live-example/</guid>
      <description>

&lt;p&gt;Understand how to write and take advantage of Python descriptor by looking into product example from Django source code.&lt;/p&gt;

&lt;p&gt;When browsing the source code of OSQA, I accidentally dipped into Django&amp;rsquo;s implementation of &lt;code&gt;AuthenticationMiddleware&lt;/code&gt;, the middleware attaching &lt;code&gt;user&lt;/code&gt; instance to each &lt;code&gt;request&lt;/code&gt; when hooked within &lt;code&gt;process_request&lt;/code&gt;. Following live code from Django 1.3 could be a great illustration on how descriptor works and what makes it agile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class LazyUser(object):
    def __get__(self, request, obj_type=None):
        if not hasattr(request, &#39;_cached_user&#39;):
            from django.contrib.auth import get_user
            request._cached_user = get_user(request)
        return request._cached_user

class AuthenticationMiddleware(object):
    def process_request(self, request):
        assert hasattr(request, &#39;session&#39;), &amp;quot;blah balh&amp;quot;
        request.__class__.user = LazyUser()
        return None
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;so-firstly-what-is-a-descriptor:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;So, firstly, what is a &lt;code&gt;descriptor&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Abstract and vague as the official documentation is, if you read it with more concrete experience,
you&amp;rsquo;d find it&amp;rsquo;s not that bad actually.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following methods only apply when an instance of the class containing the method (a so-called &lt;strong&gt;descriptor class&lt;/strong&gt;) appears in the class dictionary of another new-style class, known as the &lt;strong&gt;owner class&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;following methods&amp;rdquo;&lt;/strong&gt; refers to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;object.__get__(self, instance, owner)&lt;/code&gt; Called to get the attribute of the owner class (class attribute access) or of an instance of that class (instance attribute access). &lt;code&gt;Owner&lt;/code&gt; is always the owner class, while &lt;code&gt;instance&lt;/code&gt; is the instance that the attribute was accessed through, or &lt;code&gt;None&lt;/code&gt; when the attribute is accessed through the owner. This method should return the (computed) attribute value or raise an AttributeError exception.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object.__set__(self, instance, value)&lt;/code&gt; Called to set the attribute on an instance instance of the owner class to a new value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object.__delete__(self, instance)&lt;/code&gt; Called to delete the attribute on an instance instance of the owner class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;now-let-s-look-into-the-fresh-code:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;Now let&amp;rsquo;s look into the fresh code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class LazyUser(object):
    &amp;quot;&amp;quot;&amp;quot; LazyUser is a descriptor class
    &amp;quot;&amp;quot;&amp;quot;
    def __get__(self, request, obj_type=None):
        if not hasattr(request, &#39;_cached_user&#39;):
            from django.contrib.auth import get_user
            request._cached_user = get_user(request)
        return request._cached_user

class AuthenticationMiddleware(object):
    def process_request(self, request):
        assert hasattr(request, &#39;session&#39;), &amp;quot;blah balh&amp;quot;
        # request.__class__ is the *owner class*
        # request.__class__.user refers to the *instance* of LazyUser
        request.__class__.user = LazyUser() 
        return None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically speaking, with &lt;code&gt;__get__&lt;/code&gt; method defined, &lt;code&gt;class LazyUser&lt;/code&gt; becomes a descriptor class and then gets assigned to &lt;code&gt;request.__class__&lt;/code&gt; by hook method in &lt;code&gt;AuthenticationMiddleware&lt;/code&gt;. After that &lt;code&gt;request.__class__&lt;/code&gt; becomes the counterpart &amp;ndash; &lt;strong&gt;owner&lt;/strong&gt; class.&lt;/p&gt;

&lt;h2 id=&#34;why-called-lazy:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;Why called lazy?&lt;/h2&gt;

&lt;p&gt;By now, we&amp;rsquo;ve inspected every cover of the code. However, nothing concrete has actually happened yet, all of this has nothing to do with the real &lt;code&gt;User&lt;/code&gt; object (store in session) by now. In other words, the actual access to &lt;code&gt;User&lt;/code&gt; object has been postponed as much as possible, until &lt;code&gt;request.user&lt;/code&gt; attributed is queried (then &lt;code&gt;__get__(...)&lt;/code&gt; executes and return a meaningful user object from session, but the detail is not important to current topic). That&amp;rsquo;s where the name &lt;em&gt;LazyUser&lt;/em&gt; comes from.&lt;/p&gt;

&lt;h2 id=&#34;a-closer-look:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;A closer look&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at the parameters of &lt;code&gt;__get__&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __get__(self, request, obj_type=None):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, corresponding to documentation, &lt;code&gt;object.__get__(self, instance, owner)&lt;/code&gt;, we can find &lt;code&gt;instance&lt;/code&gt; is used instead of &lt;code&gt;owner&lt;/code&gt;. Here in our live example, &lt;code&gt;request&lt;/code&gt; is the &lt;em&gt;instance&lt;/em&gt; of owner class (&lt;code&gt;request.__class__&lt;/code&gt;).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>