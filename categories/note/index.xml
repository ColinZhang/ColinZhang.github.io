<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Note on fz84</title>
    <link>http://fanzy.me/categories/note/</link>
    <description>Recent content in Note on fz84</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Sep 2015 22:15:11 -0400</lastBuildDate>
    <atom:link href="http://fanzy.me/categories/note/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Automatically generate requirements file for Python project</title>
      <link>http://fanzy.me/post/auto-requirements/</link>
      <pubDate>Thu, 03 Sep 2015 22:15:11 -0400</pubDate>
      
      <guid>http://fanzy.me/post/auto-requirements/</guid>
      <description>&lt;p&gt;When you need to move your Python project around, say, to test under the
production environment, or to run a heavy load script on your powerful cloud
rack, you would better duplicate the exact development environment to avoid
compatibility issues.&lt;/p&gt;

&lt;p&gt;My practice for doing this migration is to use &lt;code&gt;pip&lt;/code&gt; as package management
tool and use &lt;code&gt;requirements.txt&lt;/code&gt; file to document dependencies. Then, to
recover the exact python environment, I just&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --user -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;--user&lt;/code&gt; is used so &lt;code&gt;sudo&lt;/code&gt; is not required.
If &lt;code&gt;virtualenv&lt;/code&gt; is used, probably &lt;code&gt;--user&lt;/code&gt; is not necessary neither.
But mostly I find &lt;code&gt;virtualenv&lt;/code&gt; actually an overkill and just use vanilla
pip instead. I use &lt;code&gt;--user&lt;/code&gt; so as pip will not mess up with default packages
installed by Mac OS (on the othe hand, &lt;code&gt;--system&lt;/code&gt; will).&lt;/p&gt;

&lt;p&gt;Another tool I find useful in automating this process is &lt;code&gt;pipreqs&lt;/code&gt;, which
can analyze &lt;code&gt;import&lt;/code&gt; in your project and extract them into
requirements files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install pipreqs
pipreqs /path/to/project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For completeness, another tangentially relevant choice is &lt;code&gt;pip freeze&lt;/code&gt;,
which lists all installed packages on your machine (you can filter items
by appending &lt;code&gt;--user&lt;/code&gt; and/or other filters to &lt;code&gt;freeze&lt;/code&gt; command), but maybe
not all of them are used in your project.
ear&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>