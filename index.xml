<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fz84</title>
    <link>http://fanzy.me/</link>
    <description>Recent content on fz84</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Sep 2015 10:53:13 -0400</lastBuildDate>
    <atom:link href="http://fanzy.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use Amazon Machine Learning in Python</title>
      <link>http://fanzy.me/post/boto-setup/</link>
      <pubDate>Fri, 04 Sep 2015 10:53:13 -0400</pubDate>
      
      <guid>http://fanzy.me/post/boto-setup/</guid>
      <description>

&lt;h2 id=&#34;aws-credentials:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;AWS Credentials&lt;/h2&gt;

&lt;p&gt;Appropriate credentials are required to access aws service API. Amazon Web Service
differentiates two types of credentials: root credentials and IAM credentials.
Root credentials are associated with aws accounts and have full access to all
resources. A maximum of two keys are allowed at a time. On the other end of
spectrum, IAM (Identity and Authentication Management) credentials are analogous
to user accounts in a Unix system, which are created by a root account and their
capabilities can be dynamically managed. AWS advocates the usage of IAM
credentials for security consideration. Of course, one can still create and use
root credentials, however, if they will.&lt;/p&gt;

&lt;p&gt;To access aws API through boto, one needs proper credentials set up. The first
step of doing this is to create a user (if not already created) and download the
access key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To manage IAM credentials, use IAM console.&lt;/li&gt;
&lt;li&gt;To manage root credentials, see &lt;a href=&#34;http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html&#34;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are multiple ways to configure credential file for Boto&amp;rsquo;s usage. For
instance, put the credential file downloaded from IAM at &lt;code&gt;~/.aws/credentials&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
aws_access_key_id = YOUR_ACCESS_KEY
aws_secret_access_key = YOUR_SECRET_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not sure if it&amp;rsquo;s mandatory but Boto document suggest doing so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
region=us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-boto:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;install Boto&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;pip install boto3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If for current user only, append &lt;code&gt;--user&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;using-boto3:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;Using Boto3&lt;/h2&gt;

&lt;p&gt;To verify your credentials and other configurations are correct, run a minimal
boto3 script this like,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import boto3
s3 = boto3.resource(&#39;s3&#39;)
# Print out bucket names
for bucket in s3.buckets.all():
    print(bucket.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;amazon-machine-learning-api:b2c9726d84ab8dac35e1b3504d6712b5&#34;&gt;Amazon Machine Learning API&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import boto3

client = boto3.client(&#39;machinelearning&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Automatically generate requirements file for Python project</title>
      <link>http://fanzy.me/post/auto-requirements/</link>
      <pubDate>Thu, 03 Sep 2015 22:15:11 -0400</pubDate>
      
      <guid>http://fanzy.me/post/auto-requirements/</guid>
      <description>&lt;p&gt;When you need to move your Python project around, say, to test under the
production environment, or to run a heavy load script on your powerful cloud
rack, you would better duplicate the exact development environment to avoid
compatibility issues.&lt;/p&gt;

&lt;p&gt;My practice for doing this migration is to use &lt;code&gt;pip&lt;/code&gt; as package management
tool and use &lt;code&gt;requirements.txt&lt;/code&gt; file to document dependencies. Then, to
recover the exact python environment, I just&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --user -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;--user&lt;/code&gt; is used so &lt;code&gt;sudo&lt;/code&gt; is not required.
If &lt;code&gt;virtualenv&lt;/code&gt; is used, probably &lt;code&gt;--user&lt;/code&gt; is not necessary neither.
But mostly I find &lt;code&gt;virtualenv&lt;/code&gt; actually an overkill and just use vanilla
pip instead. I use &lt;code&gt;--user&lt;/code&gt; so as pip will not mess up with default packages
installed by Mac OS (on the othe hand, &lt;code&gt;--system&lt;/code&gt; will).&lt;/p&gt;

&lt;p&gt;Another tool I find useful in automating this process is &lt;code&gt;pipreqs&lt;/code&gt;, which
can analyze &lt;code&gt;import&lt;/code&gt; in your project and extract them into
requirements files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install pipreqs
pipreqs /path/to/project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For completeness, another tangentially relevant choice is &lt;code&gt;pip freeze&lt;/code&gt;,
which lists all installed packages on your machine (you can filter items
by appending &lt;code&gt;--user&lt;/code&gt; and/or other filters to &lt;code&gt;freeze&lt;/code&gt; command), but maybe
not all of them are used in your project.
ear&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH behine firewall made easy</title>
      <link>http://fanzy.me/post/reverse-ssh-made-easy/SSH-made-easy/</link>
      <pubDate>Tue, 07 Jul 2015 16:58:45 -0400</pubDate>
      
      <guid>http://fanzy.me/post/reverse-ssh-made-easy/SSH-made-easy/</guid>
      <description>

&lt;h1 id=&#34;settings:f8b878aefe833ac195c03c37c2641d27&#34;&gt;Settings&lt;/h1&gt;

&lt;p&gt;SSH (Secure Shell) is a must-have tool for many developers who heavily rely on
SSH to script and manage their remote servers. However, using SSH in reality is
often not as handy as I&amp;rsquo;d expect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example,
if the remote server is behind a firewall or NAT (which is often the case when
you&amp;rsquo;re using servers owned by enterprises or universities), SSH
requires additional configuration or you&amp;rsquo;d have to setup a VPN prior to SSH.
VPN is not that bad but it slows down the network quite
significantly, as least in my case I can feel the latency.&lt;/li&gt;
&lt;li&gt;Even worse, if your remote server sits behind a router, say you have
a Linux box at home, with no dedicated public IP from you IPS, it&amp;rsquo;s quite not
easy to get SSH works. You need to configure port forwarding on the
router, and figure out a way to broadcast the IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;../cano-ssh.png&#34; alt=&#34;Inconvenient using case of SSH&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All these inconveniences dwarf the handy nature of SSH. But we&amp;rsquo;ll not
live with it. Fortunately, SSH is built-in
with abilities to mitigate this &amp;mdash; reverse SSH, aka SSH tunneling is a powerful
feature yet some explanation is required to understand how it works and
how to setup a hassle-free access to your remote server using this technique.&lt;/p&gt;

&lt;h1 id=&#34;step-by-step-setup:f8b878aefe833ac195c03c37c2641d27&#34;&gt;Step-by-step setup&lt;/h1&gt;

&lt;p&gt;The setting I&amp;rsquo;m dealing with is illustrated in the following figure. There
are three parties involved:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../aws-ssh.png&#34; alt=&#34;figure2&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the remote server, with hostname &lt;code&gt;cs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a cloud server with public IP, with hostname &lt;code&gt;aws-ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the client, running ordinary &lt;code&gt;ssh&lt;/code&gt; client&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setup-reverse-tunnel:f8b878aefe833ac195c03c37c2641d27&#34;&gt;setup reverse tunnel&lt;/h2&gt;

&lt;p&gt;To setup a reverse tunnel, one need firstly to inform the cloud server of
the identity of our remote server, the other end-point of this SSH tunnel
being established. To this end, execute this on the remote server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -fN -R 7000:localhost:22 -i aws-key.pem ec2-user@52.10.241.71
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command tell the cloud server (&lt;code&gt;52.10.241.71&lt;/code&gt;) to forward all traffic
going to port 7000 to 22 on the other end of this channel.
In other words, if connecting to &lt;code&gt;52.10.241.71:7000&lt;/code&gt;, all traffic eventually
arrives at 22 port on remote server. Other parameters are also important,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;: requests ssh to go to background just before command execution&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-N&lt;/code&gt;: do not execute a remote command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: read in &lt;code&gt;aws-key.pem&lt;/code&gt; as login the cloud server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test whether reverse tunnel works, try to connect to &lt;code&gt;localhost:22&lt;/code&gt;
on the AWS Server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh fanz@localhost -p 7000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If prompted with login, great, it works!&lt;/p&gt;

&lt;h2 id=&#34;connect-from-clients:f8b878aefe833ac195c03c37c2641d27&#34;&gt;connect from clients&lt;/h2&gt;

&lt;p&gt;Okay now we have a reverse tunnel working on the AWS server. Let&amp;rsquo;s move on to
accept connections from clients. The simplest way for
a client to connect to the remote server is to chain SSH commands in this way,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i aws-key.pem ec2-user@52.10.241.71 &#39;ssh fz84@localhost -p 7000&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Straightforward as it seems, this method has a major drawback &amp;ndash; it degraded
security. Owners of the immediate AWS server can witness all traffic if
he/she wants.&lt;/p&gt;

&lt;p&gt;A better approach to this end is to use &lt;code&gt;ProxyCommand&lt;/code&gt; feature, introduced in
OpenSSH v1.2. On the client, add the following to &lt;code&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host aws-ssh
      HostName 52.10.241.71
      User ec2-user
      IdentityFile aws-key.pem

Host cs
    User fz48
    ProxyCommand ssh -W localhost:7000 aws-ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Host&lt;/code&gt;: Defines for which host or hosts the configuration section applies.
The section ends with a new Host section or the end of the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User&lt;/code&gt;: Defines the username for the SSH connection. Useful if your username
on the remote host is different from your local username.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HostName&lt;/code&gt;: Defines the literal hostname for the remote server. Useful if a
nickname for the host is used in the Host line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProxyCommand&lt;/code&gt;: Specifies the proxy command for the connection. This command is
launched prior to making the connection to Hostname.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-W host:port&lt;/code&gt;: Requests that standard input and output on the client be
forwarded to host on port over the secure channel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final mistery left is which command we should use to connect to &lt;code&gt;cs&lt;/code&gt;.
It turn out to be very simple. Just type in &lt;code&gt;ssh cs&lt;/code&gt;. It just works!
By doing this, the ProxyCommand is firstly executed, which forwards &lt;code&gt;STDIN&lt;/code&gt;
and &lt;code&gt;STDOUT&lt;/code&gt; to &lt;code&gt;localhost:7000&lt;/code&gt;, then login to &lt;code&gt;aws-ssh&lt;/code&gt;. Since we already
have a reverse tunnel &amp;ldquo;listening&amp;rdquo; on port 7000, whatever I/O happens toward
terminal is forwarded to that port, then the final stop, port 22 on &lt;code&gt;cs&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I just get a new blog</title>
      <link>http://fanzy.me/post/new-blog/</link>
      <pubDate>Thu, 12 Mar 2015 11:00:51 -0400</pubDate>
      
      <guid>http://fanzy.me/post/new-blog/</guid>
      <description>&lt;p&gt;Moving from Pelican to &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is satisfatory and easy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why heart bleeds</title>
      <link>http://fanzy.me/post/CVE-2014-0160/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/CVE-2014-0160/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s not rare that the critical security infrastructure on which we heavily reply sometimes is broken, in one way or another. This blog investigated the &lt;code&gt;Heartbeat&lt;/code&gt; mechanism in TLS protocol and how it leads to the widely spread &lt;strong&gt;HeartBleed&lt;/strong&gt; vulnerability, aka CVE-2014-0160 in &lt;code&gt;OpenSSL 1.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;description-from-nvd:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Description from NVD&lt;/h2&gt;

&lt;p&gt;The (1) &lt;code&gt;TLS&lt;/code&gt; and (2) &lt;code&gt;DTLS&lt;/code&gt; implementations in &lt;code&gt;OpenSSL 1.0.1&lt;/code&gt; before &lt;code&gt;1.0.1g&lt;/code&gt; do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, as demonstrated by reading private keys, related to &lt;code&gt;d1_both.c&lt;/code&gt; and &lt;code&gt;t1_lib.c&lt;/code&gt;, aka the Heartbleed bug.&lt;/p&gt;

&lt;p&gt;To &lt;a href=&#34;https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0160&#34;&gt;NVD&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;heartbeat-extension:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Heartbeat Extension&lt;/h2&gt;

&lt;p&gt;First let&amp;rsquo;s have a look at the Heartbeat Extension. The &lt;strong&gt;Heartbeat Extension&lt;/strong&gt; is a pretty new extension to the Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) protocols. Essentially the Heartbeat Extension is designed to provide a faster and light-weight keeping-alive mechanism, and DTLS protocol can use it to perform path MTU (PMTU) discovery as well.&lt;/p&gt;

&lt;p&gt;Generally speaking, the Heartbeat Extension works in a quite simple way. Clients peroidcally send &lt;code&gt;HeartbeatRequest&lt;/code&gt; messages (including a random chosen payload) to server and the server respond with the exact copy of that payload. If the server&amp;rsquo;s response matches with the original message, the clients can make sure that that *the server is not only alive but responsive. Of course all the messages exchanged during this routine is on top of TLS layer. (Precisely speaking, the Heartbeat protocol is a new protocol running on top of the Record Layer.)For details please refer to &lt;a href=&#34;https://tools.ietf.org/html/rfc6520&#34;&gt;RFC6520&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;messages:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Messages&lt;/h2&gt;

&lt;p&gt;A natural question we&amp;rsquo;re gonna ask is how can this simple mechanism go wrong? To answer this question, we need to know some nitty-gritty. First, data structure. According to RFC6520, a HeartBeat message consists of &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, attached &lt;code&gt;payload&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct {
    HeartbeatMessageType type;
    uint16 payload_length;
    opaque payload[HeartbeatMessage.payload_length];
    opaque padding[padding_length];
} HeartbeatMessage;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though the description in RFC is fairly clear and concise, I&amp;rsquo;d like to summarize several important and tangent facts for better understanding of CVE-2014-0160,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The length of the &lt;code&gt;type&lt;/code&gt; field is 1 byte, and the length of the &lt;code&gt;payload_length&lt;/code&gt; is 2.&lt;/li&gt;
&lt;li&gt;A HeartbeatMessage must be shorter than &lt;code&gt;TLSPlaintext.length&lt;/code&gt;(TLS) or &lt;code&gt;DTLSPlaintext.length&lt;/code&gt;(DTLS). (decided through peer negotiation, default is 2^14 Bytes&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;padding_length&lt;/code&gt; must be at least 16.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scene-of-the-accident:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Scene of the accident&lt;/h2&gt;

&lt;p&gt;So here is the vulnerable code in OpenSSL 1.0.1. Let&amp;rsquo;s check step by step to see what would happen when server receives the following message:&lt;code&gt;&amp;quot;\x18\x03\x02\x00\x03\x01\x40\x00&amp;quot;&lt;/code&gt;. A few legends,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;18&lt;/code&gt;   : Content type::Heartbeat&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0302&lt;/code&gt; : Major Version=3, Minor Version=2, indicates TLS 1.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0003&lt;/code&gt; : Length = 3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;01&lt;/code&gt;   : TLS1_HB_REQUEST&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4000&lt;/code&gt; : 0x4000=2^14=16384, indicates 64-byte payload&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apparently, this packet is totally invalid, in that it claimed a non-existent 64 bytes payload. This is not hard to check at all, simply looking at the &lt;code&gt;length&lt;/code&gt; of the whole packet and the &lt;code&gt;padding_length&lt;/code&gt; is enough, because other parts is of fixed-length. However, OpenSSL didn&amp;rsquo;t do this simple check. In other words, the above packet, though apparently invalid, will be treated as normal in the following function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int
tls1_process_heartbeat(SSL *s)
{
  unsigned char *p = &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], *pl;   // (1) p points to packet
  unsigned short hbtype;
  unsigned int payload;
  unsigned int padding = 16; /* Use minimum padding */

  /* Read type and payload length first */
  hbtype = *p++;        // (2) p gets advanced to point to `payload_length`
  n2s(p, payload);      // (3) payload = n2s(*p), p+=2
  pl = p;               // (4) p and pl points to payload

  if (s-&amp;gt;msg_callback)
    s-&amp;gt;msg_callback(0, s-&amp;gt;version, TLS1_RT_HEARTBEAT,
      &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], s-&amp;gt;s3-&amp;gt;rrec.length,
      s, s-&amp;gt;msg_callback_arg);

  if (hbtype == TLS1_HB_REQUEST)
    {
    unsigned char *buffer, *bp;
    int r;

    buffer = OPENSSL_malloc(1 + 2 + payload + padding);
    bp = buffer;      // (1) bp points to buffer

    /* Enter response type, length and copy payload */
    *bp++ = TLS1_HB_RESPONSE;    // (2) 1st byte: TYPE
    s2n(payload, bp);            // (3) 2-3 byte: payload_length
    memcpy(bp, pl, payload);     // (*) payload Bytes of secret copied **
    bp += payload;
    /* Random padding */
    RAND_pseudo_bytes(bp, padding);

    //... all secrets get sent to client ...
}

//fetched from ssl/ssl_locl.h
//  n2s(c, s)
//  s = c[0] || c[1] (|| stands for concatanation)
//  c = c + 2
# define n2s(c,s)  ((s=(((unsigned int)(c[0]))&amp;lt;&amp;lt; 8)| \
              (((unsigned int)(c[1])))),c+=2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we call &lt;code&gt;tls1_process_heartbeat&lt;/code&gt; with the crafted packet &lt;code&gt;&amp;quot;\x18\x03\x02\x00\x03\x01\x40\x00&amp;quot;&lt;/code&gt;. What would happen is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; points to the beginning of HeartBeat message, i.e. the byte &lt;code&gt;&amp;quot;\x01&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hbtype := TLS1_HB_REQUEST&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; points to &lt;code&gt;payload_length&lt;/code&gt;, i.e. &lt;code&gt;&amp;quot;\x40\x00&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;payload := 0x4000&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; nows points to somewhere outside of the packet (note that packet has already ended, there is no payload at all!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memcpy(bp, pl, payload)&lt;/code&gt; actually copied 64 bytes memory from &lt;code&gt;pl&lt;/code&gt;, somewhere in stack, to the response packet that users that see in clear.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;fix-and-conclusion:ce6f2c75e20b8ec034404887a73bf817&#34;&gt;Fix and Conclusion&lt;/h2&gt;

&lt;p&gt;As we saw before, it&amp;rsquo;s fairly straightforward to fix this bug &amp;ndash; just check the length! It turned out basically just one line of C code can save the world. How surprising it is! Even though TLS is elegantly designed on board, even though the RFC is well written and carefully proof read, a single line of code can screw up everything. This bug reminds me of a sentence in Practical Cryptography:.&lt;/p&gt;

&lt;p&gt;Official patch is attached for completeness.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/ssl/t1_lib.c b/ssl/t1_lib.c
index b82fada..bddffd9 100644 (file)
--- a/ssl/t1_lib.c
+++ b/ssl/t1_lib.c
@@ -2588,16 +2588,20 @@ tls1_process_heartbeat(SSL *s)
        unsigned int payload;
        unsigned int padding = 16; /* Use minimum padding */

-       /* Read type and payload length first */
-       hbtype = *p++;
-       n2s(p, payload);
-       pl = p;
-
        if (s-&amp;gt;msg_callback)
                s-&amp;gt;msg_callback(0, s-&amp;gt;version, TLS1_RT_HEARTBEAT,
                        &amp;amp;s-&amp;gt;s3-&amp;gt;rrec.data[0], s-&amp;gt;s3-&amp;gt;rrec.length,
                        s, s-&amp;gt;msg_callback_arg);

+       /* Read type and payload length first */
+       if (1 + 2 + 16 &amp;gt; s-&amp;gt;s3-&amp;gt;rrec.length)
+               return 0; /* silently discard */
+       hbtype = *p++;
+       n2s(p, payload);
+       if (1 + 2 + payload + 16 &amp;gt; s-&amp;gt;s3-&amp;gt;rrec.length)
+               return 0; /* silently discard per RFC 6520 sec. 4 */
+       pl = p;
+
        if (hbtype == TLS1_HB_REQUEST)
                {
                unsigned char *buffer, *bp;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python Descriptor by Example</title>
      <link>http://fanzy.me/post/python-descriptor-by-live-example/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/python-descriptor-by-live-example/</guid>
      <description>

&lt;p&gt;Understand how to write and take advantage of Python descriptor by looking into product example from Django source code.&lt;/p&gt;

&lt;p&gt;When browsing the source code of OSQA, I accidentally dipped into Django&amp;rsquo;s implementation of &lt;code&gt;AuthenticationMiddleware&lt;/code&gt;, the middleware attaching &lt;code&gt;user&lt;/code&gt; instance to each &lt;code&gt;request&lt;/code&gt; when hooked within &lt;code&gt;process_request&lt;/code&gt;. Following live code from Django 1.3 could be a great illustration on how descriptor works and what makes it agile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class LazyUser(object):
    def __get__(self, request, obj_type=None):
        if not hasattr(request, &#39;_cached_user&#39;):
            from django.contrib.auth import get_user
            request._cached_user = get_user(request)
        return request._cached_user

class AuthenticationMiddleware(object):
    def process_request(self, request):
        assert hasattr(request, &#39;session&#39;), &amp;quot;blah balh&amp;quot;
        request.__class__.user = LazyUser()
        return None
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;so-firstly-what-is-a-descriptor:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;So, firstly, what is a &lt;code&gt;descriptor&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Abstract and vague as the official documentation is, if you read it with more concrete experience,
you&amp;rsquo;d find it&amp;rsquo;s not that bad actually.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following methods only apply when an instance of the class containing the method (a so-called &lt;strong&gt;descriptor class&lt;/strong&gt;) appears in the class dictionary of another new-style class, known as the &lt;strong&gt;owner class&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&amp;ldquo;following methods&amp;rdquo;&lt;/strong&gt; refers to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;object.__get__(self, instance, owner)&lt;/code&gt; Called to get the attribute of the owner class (class attribute access) or of an instance of that class (instance attribute access). &lt;code&gt;Owner&lt;/code&gt; is always the owner class, while &lt;code&gt;instance&lt;/code&gt; is the instance that the attribute was accessed through, or &lt;code&gt;None&lt;/code&gt; when the attribute is accessed through the owner. This method should return the (computed) attribute value or raise an AttributeError exception.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object.__set__(self, instance, value)&lt;/code&gt; Called to set the attribute on an instance instance of the owner class to a new value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object.__delete__(self, instance)&lt;/code&gt; Called to delete the attribute on an instance instance of the owner class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;now-let-s-look-into-the-fresh-code:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;Now let&amp;rsquo;s look into the fresh code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class LazyUser(object):
    &amp;quot;&amp;quot;&amp;quot; LazyUser is a descriptor class
    &amp;quot;&amp;quot;&amp;quot;
    def __get__(self, request, obj_type=None):
        if not hasattr(request, &#39;_cached_user&#39;):
            from django.contrib.auth import get_user
            request._cached_user = get_user(request)
        return request._cached_user

class AuthenticationMiddleware(object):
    def process_request(self, request):
        assert hasattr(request, &#39;session&#39;), &amp;quot;blah balh&amp;quot;
        # request.__class__ is the *owner class*
        # request.__class__.user refers to the *instance* of LazyUser
        request.__class__.user = LazyUser() 
        return None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Technically speaking, with &lt;code&gt;__get__&lt;/code&gt; method defined, &lt;code&gt;class LazyUser&lt;/code&gt; becomes a descriptor class and then gets assigned to &lt;code&gt;request.__class__&lt;/code&gt; by hook method in &lt;code&gt;AuthenticationMiddleware&lt;/code&gt;. After that &lt;code&gt;request.__class__&lt;/code&gt; becomes the counterpart &amp;ndash; &lt;strong&gt;owner&lt;/strong&gt; class.&lt;/p&gt;

&lt;h2 id=&#34;why-called-lazy:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;Why called lazy?&lt;/h2&gt;

&lt;p&gt;By now, we&amp;rsquo;ve inspected every cover of the code. However, nothing concrete has actually happened yet, all of this has nothing to do with the real &lt;code&gt;User&lt;/code&gt; object (store in session) by now. In other words, the actual access to &lt;code&gt;User&lt;/code&gt; object has been postponed as much as possible, until &lt;code&gt;request.user&lt;/code&gt; attributed is queried (then &lt;code&gt;__get__(...)&lt;/code&gt; executes and return a meaningful user object from session, but the detail is not important to current topic). That&amp;rsquo;s where the name &lt;em&gt;LazyUser&lt;/em&gt; comes from.&lt;/p&gt;

&lt;h2 id=&#34;a-closer-look:3fe8bdd52a228be77ee8abe72cd8f987&#34;&gt;A closer look&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at the parameters of &lt;code&gt;__get__&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __get__(self, request, obj_type=None):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, corresponding to documentation, &lt;code&gt;object.__get__(self, instance, owner)&lt;/code&gt;, we can find &lt;code&gt;instance&lt;/code&gt; is used instead of &lt;code&gt;owner&lt;/code&gt;. Here in our live example, &lt;code&gt;request&lt;/code&gt; is the &lt;em&gt;instance&lt;/em&gt; of owner class (&lt;code&gt;request.__class__&lt;/code&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quotation concept in Unix Shell</title>
      <link>http://fanzy.me/post/quotation-in-Unix-shell/</link>
      <pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/post/quotation-in-Unix-shell/</guid>
      <description>

&lt;p&gt;Tell me how to quote.&lt;/p&gt;

&lt;p&gt;The basic actions of the shell are simple. It reads a line. This is
either from a file, a script, or from a user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, meta-characters are &amp;ldquo;handled.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Second, the name of the executable is found.&lt;/li&gt;
&lt;li&gt;Third, the arguments are passed to the program.&lt;/li&gt;
&lt;li&gt;Fourth, the file redirection is setup.&lt;/li&gt;
&lt;li&gt;Lastly, the program is executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;meta-characters-and-filename-expansion:306ff65f81e8cfdac085c6fa77a5f38f&#34;&gt;Meta-characters and Filename expansion&lt;/h2&gt;

&lt;p&gt;This includes &lt;strong&gt;variable evaluation&lt;/strong&gt; (variables start with a &lt;code&gt;$&lt;/code&gt;), and
&lt;strong&gt;filename expansion&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;quotation:306ff65f81e8cfdac085c6fa77a5f38f&#34;&gt;Quotation&lt;/h2&gt;

&lt;p&gt;Why quote at all, and what do I mean by quoting? Well, the shell
understands many special characters, called &lt;code&gt;meta-characters&lt;/code&gt;. These
each have a purpose, and there are so many, beginners often suffer from
meta-itis. Example: The dollar sign(&lt;code&gt;$&lt;/code&gt;) is a meta-character, and tells
the shell the next word is a variable. If you wanted to use the dollar
sign as a regular character, how can you tell the shell the dollar sign
does not indicate a variable? Answer: the dollar sign must be
&lt;strong&gt;quoted&lt;/strong&gt;. Why? &lt;strong&gt;Quoted characters do not have a special meaning.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quoted characters do not have a special meaning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A surprising number of characters have special meanings. The lowly
space, often forgotten in many books, is an extremely important
meta-character. Consider the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm -i file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The shell breaks this line up to four words, which can be logically
divided into two classes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rm&lt;/code&gt; is program to execute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;file1&lt;/code&gt;, &lt;code&gt;file2&lt;/code&gt; are parameters or arguments, which will be
passed to &lt;code&gt;rm&lt;/code&gt; before it runs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To shell, there is no difference between &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;file1&lt;/code&gt;, except that
it follows convention that options begin with a hyphen, like &lt;code&gt;-i&lt;/code&gt;. All
shell cares is to extract four words from the line, then find the
executable &lt;code&gt;rm&lt;/code&gt; and pass the other three parameters to it. However, when
you input the quoted version, it will be another story&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm -i &#39;file1 file2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that, &amp;ldquo;quoted characters do not have a special meaning&amp;rdquo; , so does
the space between &amp;lsquo;file1&amp;rsquo; and &amp;lsquo;file2&amp;rsquo;. DO NOT perceive &amp;lsquo;file1 file2&amp;rsquo; as
a string in C or any other programming languages. &lt;strong&gt;There is no concept
of C-like string in shell&lt;/strong&gt; and don&amp;rsquo;t even try to make the metaphor,
which is often overlooked by beginners yet extremely important to keep
in mind, in order to understand quotation correctly.&lt;/p&gt;

&lt;p&gt;A more accurate description of the quoting is a &lt;strong&gt;switch&lt;/strong&gt;, or toggle &amp;ndash;
it turns on and off the quotation status whether the meta-characters
within text are getting to be interpreted. Therefore, following
variations are all equivalent&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm &#39;file1 file2&#39;
rm file1&#39; &#39;file2
rm f&#39;ile1 file&#39;2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just remember: There is NO concept of string in shell at all.&lt;/p&gt;

&lt;h2 id=&#34;strong-versus-weak-quoting:306ff65f81e8cfdac085c6fa77a5f38f&#34;&gt;Strong versus weak quoting&lt;/h2&gt;

&lt;p&gt;Simple enough,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&lt;/code&gt; is weakest: backslash(&lt;code&gt;\&lt;/code&gt;), dollar sign(&lt;code&gt;$&lt;/code&gt;), and the
back-stick(``) all keep effective inside the double quotation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;&lt;/code&gt; is strongest: single quotation returns everything inside the
quotation literally.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nested-quotation:306ff65f81e8cfdac085c6fa77a5f38f&#34;&gt;Nested quotation&lt;/h2&gt;

&lt;p&gt;Once you have fully understood that The quotation marks in the Bourne
shell are not used to define a string, but to &lt;strong&gt;disable&lt;/strong&gt; or &lt;strong&gt;enable&lt;/strong&gt;
interpretation of meta-characters, it&amp;rsquo;s easy and intuitive to play with
so called &amp;lsquo;nested quotation&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo &#39;Strong quotes use &#39;&amp;quot;&#39;&amp;quot;&#39; and weak quotes use &amp;quot;&#39;
Strong quotes use &#39; and weak quotes use &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above example tells all story about nested quotation. Equivalently&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ echo &#39;&amp;quot;&#39;&amp;quot;&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;simply gives &lt;code&gt;&amp;quot;&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;some-tricky-cases:306ff65f81e8cfdac085c6fa77a5f38f&#34;&gt;some tricky cases&lt;/h2&gt;

&lt;p&gt;There are always chances for you to use nested quotation in composing a
program. What makes it tricky is that the order of quotation matters,
let&amp;rsquo;s look at something live&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$perl -e &amp;quot;print(&#39;hello world&#39;)&amp;quot;
hello world$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Printing hello world as we excepted, but Where is the \$ from? No magic,
it is the beginning of the next line, because the absence of
&lt;code&gt;line switch&lt;/code&gt; at the tail of &amp;lsquo;hello world&amp;rsquo;. You might think following is
fine&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$perl -e &amp;quot;print(&#39;hello world\n&#39;)&amp;quot;
hello world\n$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it isn&amp;rsquo;t. Single quotation scapes &amp;lsquo;n&amp;rsquo; as Perl string syntax
specified (NOTE, n is an escape chatachter defined by programing
language, which has nothing to do with quotation in shell). In this
cases, following is the way to set it right&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$perl -e &#39;print(&amp;quot;hello world\n&amp;quot;)&#39;
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another question worthy of thinking is, will
&lt;code&gt;perl -e print(&amp;quot;hello world\n&amp;quot;)&lt;/code&gt; works? Now that &lt;code&gt;&#39;a&#39;&lt;/code&gt; has no difference
with &lt;code&gt;a&lt;/code&gt; to shell, why &lt;code&gt;&#39;print(&amp;quot;hello world\n&amp;quot;)&#39;&lt;/code&gt; works while
&lt;code&gt;print(&amp;quot;hello world\n&amp;quot;)&lt;/code&gt; doesn&amp;rsquo;t? Here is the result&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$perl -e print(&amp;quot;hello world\n&amp;quot;)
Unknown file attribute.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-s-next:306ff65f81e8cfdac085c6fa77a5f38f&#34;&gt;What&amp;rsquo;s next&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m planning to write something about &lt;strong&gt;escape character versus
quotation&lt;/strong&gt; later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://fanzy.me/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fanzy.me/about/</guid>
      <description>

&lt;p&gt;This blog collects random thoughts occurring to me while I code, think or read other guys&amp;rsquo; blogs. Sometimes I also write down practical solutions to intriguing problems I met and struggled through.&lt;/p&gt;

&lt;p&gt;Most of my blogs will be about system and its security. My ultimate goal is to disseminate security facts, rectify misunderstandings and promote tools with which people can defend themselves from vulnerabilities. For more information.&lt;/p&gt;

&lt;h1 id=&#34;me:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;img src=&#34;../images/email.png&#34; alt=&#34;email&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Github: bl4ck5un&lt;/li&gt;
&lt;li&gt;PGP fingerprint: &lt;code&gt;2B1B EE81 511C 049B 8FBA  3D20 79A9 9BA9 D60B 237C&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>